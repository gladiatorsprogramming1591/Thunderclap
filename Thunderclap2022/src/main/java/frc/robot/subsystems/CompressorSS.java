// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class CompressorSS extends SubsystemBase {
    
    private Compressor compressor;
    
    // Needed in case PCM internal relay breaks like in Deep Space
    private Relay m_relay;
    private boolean m_relayNeeded = false; 
    
    public CompressorSS() {
        compressor = new Compressor(Constants.kPCM_CANID);
        if(m_relayNeeded) {
            m_relay = new Relay(Constants.kCompressorRelay);
        }
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        compressor.start();

        // If using external relay, must turn compressor on/off 
        // based on whether the pressure release switch is is on/off
        // if true set the Relay to kForward else kOff
        if(m_relayNeeded) {
            if (compressor.getPressureSwitchValue() == false) {
                m_relay.set(Relay.Value.kForward);
                System.out.println("Turning compressor on");
            }
            else {
                m_relay.set(Relay.Value.kOff);
                System.out.println("Turning compressor off");
           }
        }

        boolean faulted = compressor.getCompressorShortedFault() 
            || compressor.getCompressorNotConnectedFault()
            || compressor.getCompressorShortedStickyFault()
            || compressor.getCompressorCurrentTooHighFault()
            || compressor.getCompressorNotConnectedStickyFault()
            || compressor.getCompressorCurrentTooHighStickyFault();
        SmartDashboard.putBoolean("getCompressorNotConnectedFault", compressor.getCompressorNotConnectedFault());
        SmartDashboard.putBoolean("getCompressorShortedStickyFault", compressor.getCompressorShortedStickyFault());
        SmartDashboard.putBoolean("getCompressorCurrentTooHighFault", compressor.getCompressorCurrentTooHighFault());
        SmartDashboard.putBoolean("getCompressorNotConnectedStickyFault", compressor.getCompressorNotConnectedStickyFault());
        SmartDashboard.putBoolean("getCompressorCurrentTooHighStickyFault", compressor.getCompressorCurrentTooHighStickyFault());
        SmartDashboard.putBoolean("getCompressorShortedFault", compressor.getCompressorShortedFault());
    }   
}

